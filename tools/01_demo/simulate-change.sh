#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# SIMULATE CHANGE RISK ON ROBOTSHOP
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


export APP_NAME=robot-shop
export SNOW_ID=dev44994

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# DO NOT MODIFY BELOW
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


clear

echo ""
echo ""
echo ""
echo ""
echo ""
echo "   __________  __ ___       _____    ________            "
echo "  / ____/ __ \/ // / |     / /   |  /  _/ __ \____  _____"
echo " / /   / /_/ / // /| | /| / / /| |  / // / / / __ \/ ___/"
echo "/ /___/ ____/__  __/ |/ |/ / ___ |_/ // /_/ / /_/ (__  ) "
echo "\____/_/      /_/  |__/|__/_/  |_/___/\____/ .___/____/  "
echo "                                   /_/            "
echo ""
echo ""
echo ""
echo ""
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Simulate Change Risk for $APP_NAME"
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"


# Get Namespace from Cluster 
echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "   üî¨ Getting Installation Namespace"
echo "   ------------------------------------------------------------------------------------------------------------------------------"

export WAIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
echo "       ‚úÖ OK - AI Manager:    $WAIOPS_NAMESPACE"


# Define Log format
export log_output_path=/dev/null 2>&1
export TYPE_PRINT="üìù "$(echo $TYPE | tr 'a-z' 'A-Z')

#------------------------------------------------------------------------------------------------------------------------------------
#  Get Credentials
#------------------------------------------------------------------------------------------------------------------------------------
echo " "
echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "    üöÄ  Initializing..."
echo "   ------------------------------------------------------------------------------------------------------------------------------"


echo "     üìõ Select Namespace $WAIOPS_NAMESPACE"
oc project $WAIOPS_NAMESPACE  >/tmp/demo.log 2>&1  || true
echo " "

echo "     üì• Get Kafka Topics"
export KAFKA_TOPIC_CR=$(oc get kafkatopics -n $WAIOPS_NAMESPACE | grep cp4waiops-cartridge.changerequest| awk '{print $1;}')

echo " "
echo "     üîê Get Kafka Password"
export KAFKA_SECRET=$(oc get secret -n $WAIOPS_NAMESPACE |grep 'aiops-kafka-secret'|awk '{print$1}')
export SASL_USER=$(oc get secret $KAFKA_SECRET -n $WAIOPS_NAMESPACE --template={{.data.username}} | base64 --decode)
export SASL_PASSWORD=$(oc get secret $KAFKA_SECRET -n $WAIOPS_NAMESPACE --template={{.data.password}} | base64 --decode)
export KAFKA_BROKER=$(oc get routes iaf-system-kafka-0 -n $WAIOPS_NAMESPACE -o=jsonpath='{.status.ingress[0].host}{"\n"}'):443
echo " "

echo "     üì• Get Working Directories"
export WORKING_DIR_CR="./tools/01_demo/INCIDENT_FILES/$APP_NAME/changerisk"
echo " "



#------------------------------------------------------------------------------------------------------------------------------------
#  Get Kafkacat executable
#------------------------------------------------------------------------------------------------------------------------------------
echo "     üì•  Getting Kafkacat executable"
if [ -x "$(command -v kafkacat)" ]; then
      export KAFKACAT_EXE=kafkacat
else
      if [ -x "$(command -v kcat)" ]; then
            export KAFKACAT_EXE=kcat
      else
            echo "     ‚ùó ERROR: kafkacat is not installed."
            echo "     ‚ùå Aborting..."
            exit 1
      fi
fi
echo " "

#------------------------------------------------------------------------------------------------------------------------------------
#  Get the cert for kafkacat
#------------------------------------------------------------------------------------------------------------------------------------
echo "     ü•á Getting Kafka Cert"
oc extract secret/kafka-secrets -n $WAIOPS_NAMESPACE --keys=ca.crt --confirm  >/tmp/demo.log 2>&1  || true
echo "        ‚úÖ OK"




#------------------------------------------------------------------------------------------------------------------------------------
#  Check Credentials
#------------------------------------------------------------------------------------------------------------------------------------
echo " "
echo " "
echo "   ------------------------------------------------------------------------------------------------------------------------------"
echo "    üîó  Checking credentials"
echo "   ------------------------------------------------------------------------------------------------------------------------------"


if [[ $KAFKA_TOPIC_CR == "" ]] ;
then
      echo " ‚ùå Kafka Topic for Change Risk not found. Aborting..."
      exit 1
else
      echo "     ‚úÖ OK - Change Risk Topic"
fi


echo " "
echo " "
echo " "
echo " "



echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "     üîé  Parameters for Incident Simulation for $APP_NAME"
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "     "
echo "       üóÇ  CR Topic                    : $KAFKA_TOPIC_CR"
echo "       üåè Kafka Broker URL            : $KAFKA_BROKER"
echo "       üîê Kafka User                  : $SASL_USER"
echo "       üîê Kafka Password              : $SASL_PASSWORD"
echo "       üñ•Ô∏è  Kafka Executable            : $KAFKACAT_EXE"
echo "     "
echo "       üìÇ Directory for CR            : $WORKING_DIR_CR"
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "   "
echo "   "
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
echo "    üóÑÔ∏è  Change Risk Files to be loaded"
echo "   ----------------------------------------------------------------------------------------------------------------------------------------"
ls -1 $WORKING_DIR_CR | grep "json"
echo "     "



#------------------------------------------------------------------------------------------------------------------------------------
#  Inject the Data
#------------------------------------------------------------------------------------------------------------------------------------
echo "   -------------------------------------------------------------------------------------------------------------------------------------"
echo "    üåè  Injecting Data" 
echo "         Quit with Ctrl-Z"
echo "   -------------------------------------------------------------------------------------------------------------------------------------"
echo "     "
echo "     "

ACT_COUNT=0

rm $WORKING_DIR_CR/*.json-e  >/tmp/demo.log 2>&1  || true

FILES="$WORKING_DIR_CR/*.json" 

export NUM_FILES=$(ls $WORKING_DIR_CR| wc -l)

for TMPL_FILE in $FILES 
do 
      ACT_COUNT=`expr $ACT_COUNT + 1`

      export FILE=/tmp/temp_ticket.json
      cp $TMPL_FILE $FILE

      echo "     "
      echo "     "
      echo "      -------------------------------------------------------------------------------------------------------------------------------------"
      echo "       üåè  Injecting Data from File $FILE ($ACT_COUNT/$(($NUM_FILES)))" 
      echo "      -------------------------------------------------------------------------------------------------------------------------------------"
      echo "     "
      


      export TICKET_number_old=$(cat $FILE | jq ".data.number")
      export TICKET_number_only_old=$(cat $FILE | jq ".data.number"| cut -c7-11| tr -d ' ')
      #echo "Actual: $TICKET_number_old"
      #echo "Actual: $TICKET_number_only_old"

      export TICKET_number_only_new=$((TICKET_number_only_old+1))
      #echo "New: $TICKET_number_only_new"
      TICKET_number_new="CHG06$TICKET_number_only_new"
      #echo "New TI: $TICKET_number_new"
      sed -i -e "s/$TICKET_number_old/\"$TICKET_number_new\"/g" $FILE
      sed -i -e "s/$TICKET_number_old/\"$TICKET_number_new\"/g" $TMPL_FILE
      sed -i -e "s/dev99999/$SNOW_ID/g" $FILE

      export TICKET_number=$(cat $FILE | jq ".data.number")
      export TICKET_assigned_to=$(cat $FILE | jq ".data.assigned_to")
      export TICKET_short_description=$(cat $FILE | jq ".data.short_description")
      export TICKET_description=$(cat $FILE | jq ".data.description")
      export TICKET_instance=$(cat $FILE | jq ".data.instance")
      echo "        ----------------------------------------------------------------------------------------------------------------------------------------"
      echo "          üîé  Change to be injected"
      echo "        ----------------------------------------------------------------------------------------------------------------------------------------"
      echo "            üóÇ  Ticket Number            : $TICKET_number"
      echo "            üåè Assigend To              : $TICKET_assigned_to"
      echo "            üì• Short Description        : $TICKET_short_description"
      echo "            üì• Description              : $TICKET_description"
      echo "            üì• SNOW INSTANCE            : $TICKET_instance"
      echo " "
      echo "        ----------------------------------------------------------------------------------------------------------------------------------------"

      #echo "          ${KAFKACAT_EXE} -v -X security.protocol=SASL_SSL -X ssl.ca.location=./ca.crt -X sasl.mechanisms=SCRAM-SHA-512  -X sasl.username=token -X sasl.password=$KAFKA_PASSWORD -b $KAFKA_BROKER -P -t $KAFKA_TOPIC_LOGS -l $FILE   "
      ${KAFKACAT_EXE} -v -X security.protocol=SASL_SSL -X ssl.ca.location=./ca.crt -X sasl.mechanisms=SCRAM-SHA-512  -X sasl.username=$SASL_USER -X sasl.password=$SASL_PASSWORD -b $KAFKA_BROKER -P -t $KAFKA_TOPIC_CR -l $FILE || true  >/tmp/demo.log 2>&1  || true
      
      echo "            ‚úÖ OK"
      echo "        ----------------------------------------------------------------------------------------------------------------------------------------"
      echo "        "

      rm "$FILE-e"  >/tmp/demo.log 2>&1  || true
done



echo " "
echo " "
echo " "
echo " "
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"
echo ""
echo " üöÄ  CP4WAIOPS Simulate Change Risk for $APP_NAME"
echo "  ‚úÖ  Done..... "
echo ""
echo "***************************************************************************************************************************************************"
echo "***************************************************************************************************************************************************"

